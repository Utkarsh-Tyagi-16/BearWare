"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@prisma+adapter-neon@5.20.0_@neondatabase+serverless@0.9.5";
exports.ids = ["vendor-chunks/@prisma+adapter-neon@5.20.0_@neondatabase+serverless@0.9.5"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/@prisma+adapter-neon@5.20.0_@neondatabase+serverless@0.9.5/node_modules/@prisma/adapter-neon/dist/index.mjs":
/*!****************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@prisma+adapter-neon@5.20.0_@neondatabase+serverless@0.9.5/node_modules/@prisma/adapter-neon/dist/index.mjs ***!
  \****************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PrismaNeon: () => (/* binding */ PrismaNeon),\n/* harmony export */   PrismaNeonHTTP: () => (/* binding */ PrismaNeonHTTP)\n/* harmony export */ });\n/* harmony import */ var _neondatabase_serverless__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @neondatabase/serverless */ \"(rsc)/./node_modules/.pnpm/@neondatabase+serverless@0.9.5/node_modules/@neondatabase/serverless/index.mjs\");\n/* harmony import */ var _prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @prisma/driver-adapter-utils */ \"(rsc)/./node_modules/.pnpm/@prisma+debug@5.20.0/node_modules/@prisma/debug/dist/index.js\");\n/* harmony import */ var _prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @prisma/driver-adapter-utils */ \"(rsc)/./node_modules/.pnpm/@prisma+driver-adapter-utils@5.20.0/node_modules/@prisma/driver-adapter-utils/dist/index.mjs\");\n/* harmony import */ var postgres_array__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! postgres-array */ \"(rsc)/./node_modules/.pnpm/postgres-array@3.0.2/node_modules/postgres-array/index.js\");\n// src/neon.ts\n\n\n\n// package.json\nvar name = \"@prisma/adapter-neon\";\n\n// src/conversion.ts\n\n\n\nvar { builtins: ScalarColumnType, getTypeParser } = _neondatabase_serverless__WEBPACK_IMPORTED_MODULE_0__.types;\nvar ArrayColumnType = {\n  BIT_ARRAY: 1561,\n  BOOL_ARRAY: 1e3,\n  BYTEA_ARRAY: 1001,\n  BPCHAR_ARRAY: 1014,\n  CHAR_ARRAY: 1002,\n  CIDR_ARRAY: 651,\n  DATE_ARRAY: 1182,\n  FLOAT4_ARRAY: 1021,\n  FLOAT8_ARRAY: 1022,\n  INET_ARRAY: 1041,\n  INT2_ARRAY: 1005,\n  INT4_ARRAY: 1007,\n  INT8_ARRAY: 1016,\n  JSONB_ARRAY: 3807,\n  JSON_ARRAY: 199,\n  MONEY_ARRAY: 791,\n  NUMERIC_ARRAY: 1231,\n  OID_ARRAY: 1028,\n  TEXT_ARRAY: 1009,\n  TIMESTAMP_ARRAY: 1115,\n  TIME_ARRAY: 1183,\n  UUID_ARRAY: 2951,\n  VARBIT_ARRAY: 1563,\n  VARCHAR_ARRAY: 1015,\n  XML_ARRAY: 143\n};\nvar _UnsupportedNativeDataType = class _UnsupportedNativeDataType extends Error {\n  constructor(code) {\n    super();\n    this.type = _UnsupportedNativeDataType.typeNames[code] || \"Unknown\";\n    this.message = `Unsupported column type ${this.type}`;\n  }\n};\n// map of type codes to type names\n_UnsupportedNativeDataType.typeNames = {\n  16: \"bool\",\n  17: \"bytea\",\n  18: \"char\",\n  19: \"name\",\n  20: \"int8\",\n  21: \"int2\",\n  22: \"int2vector\",\n  23: \"int4\",\n  24: \"regproc\",\n  25: \"text\",\n  26: \"oid\",\n  27: \"tid\",\n  28: \"xid\",\n  29: \"cid\",\n  30: \"oidvector\",\n  32: \"pg_ddl_command\",\n  71: \"pg_type\",\n  75: \"pg_attribute\",\n  81: \"pg_proc\",\n  83: \"pg_class\",\n  114: \"json\",\n  142: \"xml\",\n  194: \"pg_node_tree\",\n  269: \"table_am_handler\",\n  325: \"index_am_handler\",\n  600: \"point\",\n  601: \"lseg\",\n  602: \"path\",\n  603: \"box\",\n  604: \"polygon\",\n  628: \"line\",\n  650: \"cidr\",\n  700: \"float4\",\n  701: \"float8\",\n  705: \"unknown\",\n  718: \"circle\",\n  774: \"macaddr8\",\n  790: \"money\",\n  829: \"macaddr\",\n  869: \"inet\",\n  1033: \"aclitem\",\n  1042: \"bpchar\",\n  1043: \"varchar\",\n  1082: \"date\",\n  1083: \"time\",\n  1114: \"timestamp\",\n  1184: \"timestamptz\",\n  1186: \"interval\",\n  1266: \"timetz\",\n  1560: \"bit\",\n  1562: \"varbit\",\n  1700: \"numeric\",\n  1790: \"refcursor\",\n  2202: \"regprocedure\",\n  2203: \"regoper\",\n  2204: \"regoperator\",\n  2205: \"regclass\",\n  2206: \"regtype\",\n  2249: \"record\",\n  2275: \"cstring\",\n  2276: \"any\",\n  2277: \"anyarray\",\n  2278: \"void\",\n  2279: \"trigger\",\n  2280: \"language_handler\",\n  2281: \"internal\",\n  2283: \"anyelement\",\n  2287: \"_record\",\n  2776: \"anynonarray\",\n  2950: \"uuid\",\n  2970: \"txid_snapshot\",\n  3115: \"fdw_handler\",\n  3220: \"pg_lsn\",\n  3310: \"tsm_handler\",\n  3361: \"pg_ndistinct\",\n  3402: \"pg_dependencies\",\n  3500: \"anyenum\",\n  3614: \"tsvector\",\n  3615: \"tsquery\",\n  3642: \"gtsvector\",\n  3734: \"regconfig\",\n  3769: \"regdictionary\",\n  3802: \"jsonb\",\n  3831: \"anyrange\",\n  3838: \"event_trigger\",\n  3904: \"int4range\",\n  3906: \"numrange\",\n  3908: \"tsrange\",\n  3910: \"tstzrange\",\n  3912: \"daterange\",\n  3926: \"int8range\",\n  4072: \"jsonpath\",\n  4089: \"regnamespace\",\n  4096: \"regrole\",\n  4191: \"regcollation\",\n  4451: \"int4multirange\",\n  4532: \"nummultirange\",\n  4533: \"tsmultirange\",\n  4534: \"tstzmultirange\",\n  4535: \"datemultirange\",\n  4536: \"int8multirange\",\n  4537: \"anymultirange\",\n  4538: \"anycompatiblemultirange\",\n  4600: \"pg_brin_bloom_summary\",\n  4601: \"pg_brin_minmax_multi_summary\",\n  5017: \"pg_mcv_list\",\n  5038: \"pg_snapshot\",\n  5069: \"xid8\",\n  5077: \"anycompatible\",\n  5078: \"anycompatiblearray\",\n  5079: \"anycompatiblenonarray\",\n  5080: \"anycompatiblerange\"\n};\nvar UnsupportedNativeDataType = _UnsupportedNativeDataType;\nfunction fieldToColumnType(fieldTypeId) {\n  switch (fieldTypeId) {\n    case ScalarColumnType.INT2:\n    case ScalarColumnType.INT4:\n      return _prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ColumnTypeEnum.Int32;\n    case ScalarColumnType.INT8:\n      return _prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ColumnTypeEnum.Int64;\n    case ScalarColumnType.FLOAT4:\n      return _prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ColumnTypeEnum.Float;\n    case ScalarColumnType.FLOAT8:\n      return _prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ColumnTypeEnum.Double;\n    case ScalarColumnType.BOOL:\n      return _prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ColumnTypeEnum.Boolean;\n    case ScalarColumnType.DATE:\n      return _prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ColumnTypeEnum.Date;\n    case ScalarColumnType.TIME:\n    case ScalarColumnType.TIMETZ:\n      return _prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ColumnTypeEnum.Time;\n    case ScalarColumnType.TIMESTAMP:\n    case ScalarColumnType.TIMESTAMPTZ:\n      return _prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ColumnTypeEnum.DateTime;\n    case ScalarColumnType.NUMERIC:\n    case ScalarColumnType.MONEY:\n      return _prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ColumnTypeEnum.Numeric;\n    case ScalarColumnType.JSON:\n    case ScalarColumnType.JSONB:\n      return _prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ColumnTypeEnum.Json;\n    case ScalarColumnType.UUID:\n      return _prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ColumnTypeEnum.Uuid;\n    case ScalarColumnType.OID:\n      return _prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ColumnTypeEnum.Int64;\n    case ScalarColumnType.BPCHAR:\n    case ScalarColumnType.TEXT:\n    case ScalarColumnType.VARCHAR:\n    case ScalarColumnType.BIT:\n    case ScalarColumnType.VARBIT:\n    case ScalarColumnType.INET:\n    case ScalarColumnType.CIDR:\n    case ScalarColumnType.XML:\n      return _prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ColumnTypeEnum.Text;\n    case ScalarColumnType.BYTEA:\n      return _prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ColumnTypeEnum.Bytes;\n    case ArrayColumnType.INT2_ARRAY:\n    case ArrayColumnType.INT4_ARRAY:\n      return _prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ColumnTypeEnum.Int32Array;\n    case ArrayColumnType.FLOAT4_ARRAY:\n      return _prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ColumnTypeEnum.FloatArray;\n    case ArrayColumnType.FLOAT8_ARRAY:\n      return _prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ColumnTypeEnum.DoubleArray;\n    case ArrayColumnType.NUMERIC_ARRAY:\n    case ArrayColumnType.MONEY_ARRAY:\n      return _prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ColumnTypeEnum.NumericArray;\n    case ArrayColumnType.BOOL_ARRAY:\n      return _prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ColumnTypeEnum.BooleanArray;\n    case ArrayColumnType.CHAR_ARRAY:\n      return _prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ColumnTypeEnum.CharacterArray;\n    case ArrayColumnType.BPCHAR_ARRAY:\n    case ArrayColumnType.TEXT_ARRAY:\n    case ArrayColumnType.VARCHAR_ARRAY:\n    case ArrayColumnType.VARBIT_ARRAY:\n    case ArrayColumnType.BIT_ARRAY:\n    case ArrayColumnType.INET_ARRAY:\n    case ArrayColumnType.CIDR_ARRAY:\n    case ArrayColumnType.XML_ARRAY:\n      return _prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ColumnTypeEnum.TextArray;\n    case ArrayColumnType.DATE_ARRAY:\n      return _prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ColumnTypeEnum.DateArray;\n    case ArrayColumnType.TIME_ARRAY:\n      return _prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ColumnTypeEnum.TimeArray;\n    case ArrayColumnType.TIMESTAMP_ARRAY:\n      return _prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ColumnTypeEnum.DateTimeArray;\n    case ArrayColumnType.JSON_ARRAY:\n    case ArrayColumnType.JSONB_ARRAY:\n      return _prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ColumnTypeEnum.JsonArray;\n    case ArrayColumnType.BYTEA_ARRAY:\n      return _prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ColumnTypeEnum.BytesArray;\n    case ArrayColumnType.UUID_ARRAY:\n      return _prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ColumnTypeEnum.UuidArray;\n    case ArrayColumnType.INT8_ARRAY:\n    case ArrayColumnType.OID_ARRAY:\n      return _prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ColumnTypeEnum.Int64Array;\n    default:\n      if (fieldTypeId >= 1e4) {\n        return _prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ColumnTypeEnum.Text;\n      }\n      throw new UnsupportedNativeDataType(fieldTypeId);\n  }\n}\nfunction normalize_array(element_normalizer) {\n  return (str) => (0,postgres_array__WEBPACK_IMPORTED_MODULE_1__.parse)(str, element_normalizer);\n}\nfunction normalize_numeric(numeric) {\n  return numeric;\n}\nfunction normalize_date(date) {\n  return date;\n}\nfunction normalize_timestamp(time) {\n  return time;\n}\nfunction normalize_timestampz(time) {\n  return time.split(\"+\")[0];\n}\nfunction normalize_time(time) {\n  return time;\n}\nfunction normalize_timez(time) {\n  return time.split(\"+\")[0];\n}\nfunction normalize_money(money) {\n  return money.slice(1);\n}\nfunction normalize_xml(xml) {\n  return xml;\n}\nfunction toJson(json) {\n  return json;\n}\nfunction encodeBuffer(buffer) {\n  return Array.from(new Uint8Array(buffer));\n}\nvar parsePgBytes = getTypeParser(ScalarColumnType.BYTEA);\nvar parseBytesArray = getTypeParser(ArrayColumnType.BYTEA_ARRAY);\nfunction normalizeByteaArray(serializedBytesArray) {\n  const buffers = parseBytesArray(serializedBytesArray);\n  return buffers.map((buf) => buf ? encodeBuffer(buf) : null);\n}\nfunction convertBytes(serializedBytes) {\n  const buffer = parsePgBytes(serializedBytes);\n  return encodeBuffer(buffer);\n}\nfunction normalizeBit(bit) {\n  return bit;\n}\nvar customParsers = {\n  [ScalarColumnType.NUMERIC]: normalize_numeric,\n  [ArrayColumnType.NUMERIC_ARRAY]: normalize_array(normalize_numeric),\n  [ScalarColumnType.TIME]: normalize_time,\n  [ArrayColumnType.TIME_ARRAY]: normalize_array(normalize_time),\n  [ScalarColumnType.TIMETZ]: normalize_timez,\n  [ScalarColumnType.DATE]: normalize_date,\n  [ArrayColumnType.DATE_ARRAY]: normalize_array(normalize_date),\n  [ScalarColumnType.TIMESTAMP]: normalize_timestamp,\n  [ArrayColumnType.TIMESTAMP_ARRAY]: normalize_array(normalize_timestamp),\n  [ScalarColumnType.TIMESTAMPTZ]: normalize_timestampz,\n  [ScalarColumnType.MONEY]: normalize_money,\n  [ArrayColumnType.MONEY_ARRAY]: normalize_array(normalize_money),\n  [ScalarColumnType.JSON]: toJson,\n  [ScalarColumnType.JSONB]: toJson,\n  [ScalarColumnType.BYTEA]: convertBytes,\n  [ArrayColumnType.BYTEA_ARRAY]: normalizeByteaArray,\n  [ArrayColumnType.BIT_ARRAY]: normalize_array(normalizeBit),\n  [ArrayColumnType.VARBIT_ARRAY]: normalize_array(normalizeBit),\n  [ArrayColumnType.XML_ARRAY]: normalize_array(normalize_xml)\n};\nfunction fixArrayBufferValues(values) {\n  for (let i = 0; i < values.length; i++) {\n    const list = values[i];\n    if (!Array.isArray(list)) {\n      continue;\n    }\n    for (let j = 0; j < list.length; j++) {\n      const listItem = list[j];\n      if (ArrayBuffer.isView(listItem)) {\n        list[j] = Buffer.from(listItem.buffer, listItem.byteOffset, listItem.byteLength);\n      }\n    }\n  }\n  return values;\n}\n\n// src/neon.ts\nvar debug = (0,_prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_3__.Debug)(\"prisma:driver-adapter:neon\");\nvar NeonQueryable = class {\n  constructor() {\n    this.provider = \"postgres\";\n    this.adapterName = name;\n  }\n  /**\n   * Execute a query given as SQL, interpolating the given parameters.\n   */\n  async queryRaw(query) {\n    const tag = \"[js::query_raw]\";\n    debug(`${tag} %O`, query);\n    const res = await this.performIO(query);\n    if (!res.ok) {\n      return (0,_prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.err)(res.error);\n    }\n    const { fields, rows } = res.value;\n    const columnNames = fields.map((field) => field.name);\n    let columnTypes = [];\n    try {\n      columnTypes = fields.map((field) => fieldToColumnType(field.dataTypeID));\n    } catch (e) {\n      if (e instanceof UnsupportedNativeDataType) {\n        return (0,_prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.err)({\n          kind: \"UnsupportedNativeDataType\",\n          type: e.type\n        });\n      }\n      throw e;\n    }\n    return (0,_prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ok)({\n      columnNames,\n      columnTypes,\n      rows\n    });\n  }\n  /**\n   * Execute a query given as SQL, interpolating the given parameters and\n   * returning the number of affected rows.\n   * Note: Queryable expects a u64, but napi.rs only supports u32.\n   */\n  async executeRaw(query) {\n    const tag = \"[js::execute_raw]\";\n    debug(`${tag} %O`, query);\n    return (await this.performIO(query)).map((r) => r.rowCount ?? 0);\n  }\n};\nvar NeonWsQueryable = class extends NeonQueryable {\n  constructor(client) {\n    super();\n    this.client = client;\n  }\n  async performIO(query) {\n    const { sql, args: values } = query;\n    try {\n      const result = await this.client.query(\n        {\n          text: sql,\n          values: fixArrayBufferValues(values),\n          rowMode: \"array\",\n          types: {\n            // This is the error expected:\n            // No overload matches this call.\n            // The last overload gave the following error.\n            //   Type '(oid: number, format?: any) => (json: string) => unknown' is not assignable to type '{ <T>(oid: number): TypeParser<string, string | T>; <T>(oid: number, format: \"text\"): TypeParser<string, string | T>; <T>(oid: number, format: \"binary\"): TypeParser<...>; }'.\n            //     Type '(json: string) => unknown' is not assignable to type 'TypeParser<Buffer, any>'.\n            //       Types of parameters 'json' and 'value' are incompatible.\n            //         Type 'Buffer' is not assignable to type 'string'.ts(2769)\n            //\n            // Because pg-types types expect us to handle both binary and text protocol versions,\n            // where as far we can see, pg will ever pass only text version.\n            //\n            // @ts-expect-error\n            getTypeParser: (oid, format) => {\n              if (format === \"text\" && customParsers[oid]) {\n                return customParsers[oid];\n              }\n              return _neondatabase_serverless__WEBPACK_IMPORTED_MODULE_0__.types.getTypeParser(oid, format);\n            }\n          }\n        },\n        fixArrayBufferValues(values)\n      );\n      return (0,_prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ok)(result);\n    } catch (e) {\n      debug(\"Error in performIO: %O\", e);\n      if (e && typeof e.code === \"string\" && typeof e.severity === \"string\" && typeof e.message === \"string\") {\n        return (0,_prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.err)({\n          kind: \"Postgres\",\n          code: e.code,\n          severity: e.severity,\n          message: e.message,\n          detail: e.detail,\n          column: e.column,\n          hint: e.hint\n        });\n      }\n      throw e;\n    }\n  }\n};\nvar NeonTransaction = class extends NeonWsQueryable {\n  constructor(client, options) {\n    super(client);\n    this.options = options;\n  }\n  async commit() {\n    debug(`[js::commit]`);\n    this.client.release();\n    return Promise.resolve((0,_prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ok)(void 0));\n  }\n  async rollback() {\n    debug(`[js::rollback]`);\n    this.client.release();\n    return Promise.resolve((0,_prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ok)(void 0));\n  }\n};\nvar NeonTransactionContext = class extends NeonWsQueryable {\n  constructor(conn) {\n    super(conn);\n    this.conn = conn;\n  }\n  async startTransaction() {\n    const options = {\n      usePhantomQuery: false\n    };\n    const tag = \"[js::startTransaction]\";\n    debug(\"%s options: %O\", tag, options);\n    return (0,_prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ok)(new NeonTransaction(this.conn, options));\n  }\n};\nvar PrismaNeon = class extends NeonWsQueryable {\n  constructor(pool, options) {\n    if (!(pool instanceof _neondatabase_serverless__WEBPACK_IMPORTED_MODULE_0__.Pool)) {\n      throw new TypeError(`PrismaNeon must be initialized with an instance of Pool:\nimport { Pool } from '@neondatabase/serverless'\nconst pool = new Pool({ connectionString: url })\nconst adapter = new PrismaNeon(pool)\n`);\n    }\n    super(pool);\n    this.options = options;\n    this.isRunning = true;\n  }\n  getConnectionInfo() {\n    return (0,_prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ok)({\n      schemaName: this.options?.schema\n    });\n  }\n  async transactionContext() {\n    const conn = await this.client.connect();\n    return (0,_prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ok)(new NeonTransactionContext(conn));\n  }\n  async close() {\n    if (this.isRunning) {\n      await this.client.end();\n      this.isRunning = false;\n    }\n    return (0,_prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ok)(void 0);\n  }\n};\nvar PrismaNeonHTTP = class extends NeonQueryable {\n  constructor(client) {\n    super();\n    this.client = client;\n  }\n  async performIO(query) {\n    const { sql, args: values } = query;\n    return (0,_prisma_driver_adapter_utils__WEBPACK_IMPORTED_MODULE_2__.ok)(\n      await this.client(sql, values, {\n        arrayMode: true,\n        fullResults: true\n      })\n    );\n  }\n  transactionContext() {\n    return Promise.reject(new Error(\"Transactions are not supported in HTTP mode\"));\n  }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@prisma+adapter-neon@5.20.0_@neondatabase+serverless@0.9.5/node_modules/@prisma/adapter-neon/dist/index.mjs\n");

/***/ })

};
;